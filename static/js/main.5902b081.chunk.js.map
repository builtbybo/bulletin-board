{"version":3,"sources":["../../../../../APPS/lynda/bulletin-board/src/Note.js","../../../../../APPS/lynda/bulletin-board/src/Board.js","../../../../../APPS/lynda/bulletin-board/src/serviceWorker.js","../../../../../APPS/lynda/bulletin-board/src/index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","renderForm","renderDisplay","save","randomBetween","style","right","window","innerWidth","top","innerHeight","transform","concat","x","y","s","Math","ceil","random","textArea","_newText","focus","select","nextProps","nextState","children","setState","e","preventDefault","onChange","value","index","onRemove","_this2","react_default","a","createElement","className","onSubmit","ref","input","defaultValue","id","onClick","fa","Component","Board","notes","add","eachNote","update","nextId","self","count","fetch","then","response","json","split","forEach","sentence","substring","text","prevState","toConsumableArray","note","uniqueId","newText","i","console","log","map","objectSpread","filter","src_Note","key","Boolean","location","hostname","match","ReactDOM","render","src_Board","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5902b081.chunk.js","sourcesContent":["import React, { Component} from 'react';\nimport { FaPencilAlt} from 'react-icons/fa';\nimport { FaTrash } from 'react-icons/fa';\n// import { FaExclamation } from 'react-icons/fa';\n\n\nclass Note extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            editing: false\n        }\n        this.edit = this.edit.bind(this)\n        this.remove = this.remove.bind(this)\n        this.renderForm = this.renderForm.bind(this)\n        this.renderDisplay = this.renderDisplay.bind(this)\n        this.save = this.save.bind(this)\n        this.randomBetween = this.randomBetween.bind(this)\n    }\n\n    componentWillMount() {\n        this.style = {\n            right: this.randomBetween(0, window.innerWidth - 150, 'px'),\n            top: this.randomBetween(0, window.innerHeight - 150, 'px'),\n            transform:`rotate(${this.randomBetween(-25, 25, 'deg')})`\n            \n        }\n    }\n    randomBetween(x, y, s) {\n        return x + Math.ceil(Math.random() * (y-x)) + s\n\n    }\n\n    componentDidUpdate() {\n       var textArea\n       if (this.state.editing) {\n           textArea = this._newText\n           textArea.focus()\n           textArea.select()\n       }\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n        return(\n            this.props.children !== nextProps.children || this.state !== nextState\n        )\n\n    }\n\n    edit() {\n        this.setState({\n            editing: true\n        })\n    }\n\n    save(e) {\n        e.preventDefault();\n        this.props.onChange(this._newText.value, this.props.index)\n        this.setState({\n            editing: false\n        })\n\n    }\n\n    remove() {\n        this.props.onRemove(this.props.index)\n    }\n\n    renderForm(){\n        return (\n            <div className=\"note\" style={this.style}>\n                <form onSubmit={this.save}> \n                     {/* Ref is a reference to whatever the content is */}\n                    <textarea \n                        ref={input => this._newText = input } \n                        defaultValue={this.props.children}       \n                    />\n                    <button id=\"save\" >Save</button>\n                </form>\n            </div>\n        )\n    }\n\n\n    renderDisplay() {\n        return (\n            <div className=\"note\" style={this.style}>\n                <p>{this.props.children}</p>\n                <span>\n                    <button id=\"edit\" onClick={this.edit}><FaPencilAlt /></button>\n                    <button id=\"remove\" onClick={this.remove}><FaTrash /></button>\n                </span>\n\n            </div>\n        )\n    }\n\n    render() {\n        return this.state.editing ? this.renderForm() : this.renderDisplay();\n    }\n\n}\n\nexport default Note","import React, {Component } from 'react';\nimport Note from './Note';\nimport { FaPlus } from 'react-icons/fa';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props) \n            this.state = {\n                notes: []\n            }\n        this.add = this.add.bind(this)\n        this.eachNote = this.eachNote.bind(this)\n        this.update = this.update.bind(this)\n        this.remove = this.remove.bind(this)\n        this.nextId = this.nextId.bind(this)\n\n    }\n    componentWillMount() {\n        let self = this\n        if (this.props.count) {\n            fetch(`https://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`)\n                .then(response => response.json())\n                .then(json => json[0]\n                    .split('. ')\n                    .forEach(sentence => self.add(sentence.substring(0, 25))))\n        }\n    }\n\n    add(text) {\n        this.setState(prevState => ({\n            notes: [\n                ...prevState.notes,\n                {\n                    id: this.nextId(),\n                    note: text\n                }\n            ]\n        }))\n\n    }\n    nextId() {\n        this.uniqueId = this.uniqueId || 0\n        return this.uniqueId++\n    }\n    update(newText, i) {\n        console.log('updating item at index ', i, newText)\n        this.setState(prevState => ({\n            notes: prevState.notes.map(\n                note => (note.id !== i) ? note : {...note, note: newText}\n            )\n        }))\n    }\n\n    remove(id) {\n        console.log('removing item at ' + id)\n        this.setState( prevState => ({\n            notes: prevState.notes.filter(note => note.id !== id )\n        }))\n    }\n    eachNote (note, i) {\n        return (\n            <Note key={note.id}\n                  index={note.id}\n                  onChange={this.update}\n                  onRemove={this.remove}>\n                  {note.note}\n            </Note>\n        )\n    }\n    render() {\n        return (\n            <div className=\"board\">\n                {this.state.notes.map(this.eachNote)}\n                <button onClick={this.add.bind(null, \"New Note\")}\n                        id=\"add\">\n                <FaPlus />\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Board;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board count={50} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}